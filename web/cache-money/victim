#!/usr/bin/exec-suid --real -- /usr/bin/python -I
import sys
sys.path.append('/challenge')

def print_flag(jsSecret):
    if jsSecret!=secret:
        print("No cheating!")
    try:
        with open("/flag", "r") as f:
            text = f.read()
            return text
    except FileNotFoundError:
        print("Error: Flag file not found.")

# Add your imports and other code below here
from flask import Flask, request, render_template, render_template_string, jsonify
from flask_caching import Cache
import random
import secrets
import requests


app = Flask(__name__)


wordlist = [
    "laptop", "headphones", "keyboard", "mouse", "monitor", "printer", "camera", "tripod", "tablet", "smartphone",
    "wallet", "backpack", "suitcase", "handbag", "sunglasses", "watch", "belt", "jacket", "boots", "sneakers",
    "bracelet", "ring", "necklace", "earrings", "poster", "painting", "sculpture", "comic book", "vinyl record",
    "guitar", "drum set", "microphone", "amplifier", "piano", "violin", "lamp", "rug", "mirror", "couch",
    "bookshelf", "chair", "desk", "bed frame", "mattress", "blanket", "curtains", "cookware", "knife set", "blender",
    "coffee maker", "toaster", "vacuum", "sewing machine", "bike", "skateboard", "rollerblades", "tent", "sleeping bag",
    "fishing rod", "kayak", "helmet", "soccer ball", "basketball", "tennis racket", "yoga mat", "weights", "treadmill",
    "dumbbells", "puzzle", "board game", "lego set", "action figure", "dollhouse", "toy car", "remote control car", "drone", "binoculars",
    "microscope", "telescope", "calculator", "notebook", "fountain pen", "calendar", "stamps", "coin collection", "trading cards", "poker set",
    "camp stove", "lantern", "first aid kit", "garden tools", "flower pot", "watering can", "bird feeder", "power drill", "screwdriver set", "toolbox"
]

word = random.choice(wordlist)


def genSecret(length):
    return secrets.token_urlsafe(length)[:length]

@app.route('/call-python', methods=['POST'])
def call_python():
    data = request.json
    jsSecret = data.get('jsSecret')
    result = print_flag(jsSecret)
    return jsonify({'flag': result})


@app.route('/get-secret', methods=['POST'])
def get_secret():
    return jsonify({'secret': secret})

@app.route('/', methods=['GET'])
def index():
    global word 
    return render_template('victim.html', word=random.choice(wordlist))


@app.route('/victimSearch', methods=['GET'])
def victimSearch():
    reqWord = request.args.get('word') #just so it appears in the url for reference
    global word
    try:
        payload = {"search": reqWord, "font": "Arial"}
        searchRes =  requests.post("http://127.0.0.1:5000/searchListings", data=payload)
        word = random.choice(wordlist)
    except Exception as e:
        print(str(e))
        return render_template("error.html")

    pageHtml = searchRes.text 
    flagScript = '''
    <body>
    <script>
        function getFlag(){
            const stack = new Error().stack;
            // console.log(stack);
            if (stack.includes("console")) {
                alert("Nice try! No cheating via console.");
                return;
            }
            getSecret().then(secret => flagReq(secret).then(flag => {alert(flag)}));
        }

        // using this as a way to prevent the user from simply sending a request to the showFlag endpoint
        async function getSecret() {
            const stack = new Error().stack;
            if (stack.includes("console")) {
                // can probably still be cheated but at this point it's harder than just doing the intended solution :)
                alert("Nice try! No cheating via console.");
                return;
            }
            else {
                let response = await fetch('/get-secret', { method: 'POST' });
                let data = await response.json();
                return data.secret;
            }
        }

        async function flagReq(secret){
            const stack = new Error().stack;
            if (stack.includes("console")) {
                alert("Nice try! No cheating via console.");
                return;
            }
            else{
                let response = await fetch('/call-python', {
                    "method":"POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    "body": JSON.stringify({ "jsSecret": secret }),
                });
                let data = await response.json();
                return data.flag
            }
        }

    </script>
    
    '''

    pageHtml = pageHtml.replace('<body>', flagScript)
    return render_template_string(pageHtml)
    


if __name__ == '__main__':
    secret = genSecret(16)
    app.run(port=5555)
